{
"version":3,
"file":"indicatrix.js",
"lineCount":1,
"mappings":"A,aAQeA,eAAyB,CAACC,CAAD,CAAOC,CAAP,CAAgBC,CAAA,CAAU,EAA1B,CAA8B,CACpE,MAAM,CAAE,SAAAC,CAAA,CAAW,GAAb,CAAkB,SAAAC,CAAA,CAAWC,OAAAC,OAA7B,CAAA,CAAgDJ,CAChDK,EAAAA,CAAsB,UAAlB,EAAA,MAAON,EAAP,CAA+BA,CAAA,EAA/B,CAA2CA,CACrD,OAAMO,EAAQJ,CAAAI,MAAAC,KAAA,CAAoBL,CAApB,CAEd,KAAIM,EAAI,CAAR,CAGIC,EAFkB,GAAGX,CAAH,GAAU,GAAAY,OAAA,CAAWF,CAAX,CAAV,EAGtBF,EAAA,CAAMG,CAAN,CACME,EAAAA,CAAMC,WAAA,CAAY,EAAA,EAAM,CAC5BJ,CAAA,EAAKA,CAAL,CAAS,CAAT,EAAc,CACdC,EAAA,CANoB,GAAGX,CAAH,GAAU,GAAAY,OAAA,CAAWF,CAAX,CAAV,EACFF,EAAA,CAAM,KAAK,GAAAI,OAAA,CAAWZ,CAAAe,OAAX,CAAyB,CAAzB,CAAL,IAAN,CAOlBP,EAAA,CAAMG,CAAN,CAJ4B,CAAlB,CAKTR,CALS,CAMZ,IAAI,CAEF,MADYa,OAAMT,CADhB,CAAJ,OAGU,CACRU,aAAA,CAAcJ,CAAd,CAbkB,CAAAL,CAAA,CAAM,KAAK,GAAAI,OAAA,CAAWZ,CAAAe,OAAX,CAAyB,CAAzB,CAAL,IAAN,CAYV,CAnB0D,CAAvDhB,CCNf,CAAQ,iBAAR,CAA2B,IAAImB,OAAJ,CAAY,CAAAC,CAAA,CAAA,EAAKC,UAAA,CAAWD,CAAX,CAAc,GAAd,CAAjB,CAA3B,C;",
"sources":["node_modules/indicatrix/build/index.js","t/require.js"],
"sourcesContent":["/**\n * Will print the loading text and refresh the CLI line to show the ellipsis while the promise is loading.\n * @param {string} text The text to display in the CLI.\n * @param {Promise} promise The promise or an async function that returns the promise.\n * @param {Options} options The optional options for the indicator, such as the refresh interval.\n * @param {number} [options.interval=250] The interval with which to update the screen. Default `250`.\n * @param {Writable} [options.writable=\"process.stdout\"] The writable stream used for printing data with the `.write` method. Default `process.stdout`.\n */\n               async function indicatrix(text, promise, options = {}) {\n  const { interval = 250, writable = process.stdout } = options\n  const p = typeof promise == 'function' ? promise() : promise\n  const write = writable.write.bind(writable)\n\n  let i = 1\n  const getText = () => `${text}${'.'.repeat(i)}`\n  const clear = () => write(`\\r${' '.repeat(text.length + 3)}\\r`)\n  let s = getText()\n  write(s)\n  const int = setInterval(() => {\n    i = (i + 1) % 4\n    s = getText()\n    clear()\n    write(s)\n  }, interval)\n  try {\n    const res = await p\n    return res\n  } finally {\n    clearInterval(int)\n    clear()\n  }\n}\n\n/* documentary types/index.xml */\n/**\n * @typedef {import('stream').Writable} Writable\n *\n * @typedef {Object} Options The optional options for the indicator, such as the refresh interval.\n * @prop {number} [interval=250] The interval with which to update the screen. Default `250`.\n * @prop {Writable} [writable=\"process.stdout\"] The writable stream used for printing data with the `.write` method. Default `process.stdout`.\n */\n\n\nmodule.exports = indicatrix","const loading = require('indicatrix')\n\nloading('Code is loading', new Promise(r => setTimeout(r, 10000)))\n"],
"names":["indicatrix","text","promise","options","interval","writable","process","stdout","p","write","bind","i","s","repeat","int","setInterval","length","res","clearInterval","Promise","r","setTimeout"]
}
