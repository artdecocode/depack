const stream = require('stream');
const os = require('os');
(function(){
  var g={o:(a,b=0,d=!1)=>{if(0===b&&!d)return a;a=a.split("\n",d?b+1:Number.Infinity);return d?a[a.length-1]:a.slice(b).join("\n")},B:(a,b)=>(0,g.o)(a,2+(b?1:0)),A:(a)=>(0,g.o)(a,2,!0),C:(a)=>`Error: ${a}`,l:(a)=>{var {callee:{caller:a}}=a;return a}};const {homedir:k}=os,l=/\s+at.*(?:\(|\s)(.*)\)?/,m=/^(?:(?:(?:node|(?:internal\/[\w/]*|.*node_modules\/(?:IGNORED_MODULES)\/.*)?\w+)\.js:\d+:\d+)|native)/,n=k();
var q=(a,b={})=>{const {R:d=!1,L:c=["pirates"]}=b,e=new RegExp(m.source.replace("IGNORED_MODULES",c.join("|")));return a.replace(/\\/g,"/").split("\n").filter((a)=>{a=a.match(l);if(null===a||!a[1])return!0;a=a[1];return a.includes(".app/Contents/Resources/electron.asar")||a.includes(".app/Contents/Resources/default_app.asar")?!1:!e.test(a)}).filter((a)=>""!==a.trim()).map((a)=>d?a.replace(l,(a,b)=>a.replace(b,b.replace(n,"~"))):a).join("\n")};var t={D:function(a,b,d=!1){return function(c){var e=(0,g.l)(arguments),{stack:h}=Error();const f=(0,g.A)(h),p=(h=c instanceof Error)?c.message:c;e=[(0,g.C)(p),...null!==e&&a===e||d?[b]:[f,b]].join("\n");e=q(e);return Object.assign(h?c:Error(),{message:p,stack:e})}}};q&&q.f&&(q=q.default);const {}=g;function u(a){const {stack:b}=Error();return(0,t.D)((0,g.l)(arguments),(0,g.B)(b,a),a)}const {}=g,{}=t;const {Writable:v}=stream;u&&u.f&&(u=u.default);q&&q.f&&(q=q.default);
var w=class extends v{constructor(a){a=void 0===a?{}:a;var b=Object.assign({},a),d=void 0===a.h?u(!0):a.h;a=(delete b.h,b);super(a);const {v:c,H:e}=a;this.b=[];this.u=new Promise((a,b)=>{this.on("finish",()=>{let b;b=c?Buffer.concat(this.b):this.b.join("");a(b);this.b=[]});this.once("error",(a)=>{if(-1==a.stack.indexOf("\n"))a=d(a),b(a);else{const c=q(a.stack);a.stack=c;b(a)}});e&&(e.once("error",(a)=>this.emit("error",a)),e.pipe(this))})}_write(a,b,d){this.b.push(a);d()}get F(){return this.u}};
w.w=async(a)=>{var b={J:!0};b=void 0===b?{v:!1}:b;var {F:a}=new w(Object.assign({},{H:a},b,{h:u(!0)}));return await a};const x=(a)=>new RegExp(`%%_RESTREAM_${a.toUpperCase()}_REPLACEMENT_(\\d+)_%%`,"g"),y=(a,b)=>`%%_RESTREAM_${a.toUpperCase()}_REPLACEMENT_${b}_%%`;var z={j:function(a){if("object"!=typeof a)return!1;const {a:b,c:d}=a;a=-1!=["string","function"].indexOf(typeof d);return b instanceof RegExp&&a},i:(a,b)=>{if(!(b instanceof Error))throw b;var [,,a]=a.stack.split("\n",3);a=b.stack.indexOf(a);if(-1==a)throw b;a=b.stack.substr(0,a-1);b.stack=a.substr(0,a.lastIndexOf("\n"));throw b;}};const {Transform:A}=stream,{}=z;q&&q.f&&(q=q.default);
var B=class extends A{constructor(a){super();this.rules=(Array.isArray(a)?a:[a]).filter(z.j)}async reduce(a){return await this.rules.reduce(async(a,{a:d,c})=>{a=await a;if(this.g)return a;if("string"==typeof c)a=a.replace(d,c);else{const b=c.bind(this),h=[];let f;c=a.replace(d,(a,...c)=>{f=Error();try{if(this.g)return a;const d=b(a,...c);d instanceof Promise&&h.push(d);return d}catch(r){(0,z.i)(f,r)}});if(h.length)try{const b=await Promise.all(h);a=a.replace(d,()=>b.shift())}catch(p){(0,z.i)(f,p)}else a=
c}return a},`${a}`)}async _transform(a,b,d){try{const b=await this.reduce(a);this.push(b);d()}catch(c){a=q(c.stack),c.stack=a,d(c)}}};const {}=z;function C(a){let b="";const d=new D({transform(c,e,h){let f;for(b+=c.toString();(c=a.exec(b))&&(d.push(c),f=c,a.global););f&&(b=b.slice(f.index+f[0].length));h()},P:!0});return d}const {Transform:D}=stream;C.N=(a,b)=>Object.keys(a).reduce((d,c)=>{var e=a[c];var {m:h=y,K:f=x}=void 0===b?{}:b;f=f(c);e={name:c,a:e,G:f,m:h,map:{},lastIndex:0};return Object.assign({},d,{[c]:e})},{});C.M=(a)=>{const {a:b,map:d,m:c,name:e}=a;return{a:b,c(b){const {lastIndex:f}=a;d[f]=b;a.lastIndex+=1;return c(e,f)}}};
C.O=(a)=>{const {G:b,map:d}=a;return{a:b,c(a,b){a=d[b];delete d[b];return a}}};C.s=B;C.I=(a,b)=>b.filter(z.j).reduce((a,{a:b,c:e})=>{if(this.g)return a;if("string"==typeof e)a=a.replace(b,e);else{const d=e.bind(this);let c;return a.replace(b,(a,...b)=>{c=Error();try{return this.g?a:d(a,...b)}catch(r){(0,z.i)(c,r)}})}},`${a}`);const {Readable:E}=stream,{}=w,{}=C;(async()=>{var a=new E({read(){this.push("ok");this.push(null)}});const b=new C.s([{re:/ok/,replacement:()=>"OK"}]);a.pipe(b);a=await (0,w.w)(b);console.log(a)})();
})()

